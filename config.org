#+title: Doom Configuration
#+author: Patrick Norton
#+email: patrick.147.norton@gmail.com

* Package Configuration

** Header

Set =lexical-binding= for this file.

#+begin_src elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

Add a warning message to not edit =config.el= directly since that file is
overwritten every time this one is saved.

#+begin_src elisp
;; WARNING: This file is generated by editing config.org: changes here will be
;; overwritten.
#+end_src

** Global constants

*** Contact info

Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates, and snippets.

#+begin_src elisp
(setq user-full-name "Patrick Norton"
      user-mail-address "patrick.147.norton@gmail.com")
#+end_src

*** Fonts

Doom exposes five (optional) variables for controlling fonts in Doom. Here are
the three important ones:

- =doom-font=
- =doom-variable-pitch-font=
- =doom-big-font= -- used for =doom-big-font-mode=; use this for presentations
  or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd font
string. You generally only need these two:

One issue with my current Linux machine is the fact that the font does not wend
up the right size without some configuring. Due to that, the font size needs to
be set to 9.0 instead.

Since I'm now using the Doom Unicode module, I need to also set
=doom-unicode-font= to =doom-font= or otherwise it will default to some other
font for everything.

#+begin_src elisp
(setq doom-font (font-spec :family "Fira Code Retina" :size (if IS-MAC 12 9.0)))
(setq doom-unicode-font doom-font)
#+end_src

*** Themes

There are two ways to load a theme. Both assume the theme is installed and
available. You can either set =doom-theme= manually or load a theme with the
=load-theme= function.

#+begin_src elisp
(load-theme 'atom-one-dark t)
#+end_src

*** Org

If you use =org= and don't want your org files in the default location below,
change =org-directory=. It must be set before org loads!

#+begin_src elisp
(setq org-directory "~/org/")
#+end_src

Org-roam has a bug in which the database is only recording one tag per file (see
[[https://github.com/org-roam/org-roam/issues/2393][this]] and [[https://github.com/org-roam/org-roam-ui/issues/289][this]] issue), so we revert to the standard sqlite database for the time
being.

#+begin_src elisp
(setq org-roam-database-connector 'sqlite)
#+end_src

*** Line numbers

This determines the style of line numbers in effect. If set to =nil=, line
numbers are disabled. For relative line numbers, set this to =relative=.

#+begin_src elisp
(setq display-line-numbers-type t)
#+end_src

*** Tramp

This sets TRAMP's default executable path to start by checking the path of the
remote shell.

#+begin_src elisp
(after! tramp
  (add-to-list 'tramp-remote-path 'tramp-own-remote-path))
#+end_src

*** Eglot

This defaults =rust-analyzer= to use Clippy by default. Note that this will be
completely overridden if the value is changed in =.dir-locals.el=, but I have
not been able to get one of the other methods described [[https://joaotavora.github.io/eglot/#User_002dspecific-configuration][here]] to work.

#+begin_src elisp
(setq-default eglot-workspace-configuration
              '(:rust-analyzer (:checkOnSave (:command "clippy"))))
#+end_src

*** Shell path

Emacs doesn't set the shell path in windowed systems by default, so we need to
initialize it manually in windowed systems.

NOTE: This has been replaced by an =env= file (see =doom help env=), as it makes
startup much faster. Therefore, it is no longer tangled into the init file,
although it is left in this file for future reference.

#+begin_src elisp :tangle no
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))
#+end_src

*** Smooth scrolling

Emacs 29+ has support for smooth scrolling, which I want enabled.

#+begin_src elisp
(pixel-scroll-precision-mode t)
#+end_src

*** Paren context

A new Emacs 29 feature is showing the matching parenthesis when your cursor is
on a close-paren. There are several possibilities for this, but I like the
overlay method best.

#+begin_src elisp
(setq show-paren-context-when-offscreen 'overlay)
#+end_src

*** Trash

I want Emacs to move files to the trash can instead of deleting them.

#+begin_src elisp
(setq delete-by-moving-to-trash t)
#+end_src

** Additional information

Here are some additional functions/macros that could help you configure Doom:

- =load!= for loading external =*.el= files relative to this one
- =use-package= for configuring packages
- =after!= for running code after a package has loaded
- =add-load-path!= for adding directories to the =load-path=, relative to
  this file. Emacs searches the =load-path= when you load packages with
  =require= or =use-package=
- =map!= for binding new keys

To get information about any of these functions/macros, move the cursor over the
highlighted symbol and press =K=. This will open documentation for it, including
demos of how they are used.

You can also try =gd= to jump to their definition and see how they are
implemented.

** Load other files

There are three files we currently load:

- =nlang-mode.el= defines a major-mode for editing =.newlang= files
- =cppman.el= defines a =cppman= function that allows for accessing the =cppman=
  utility from within Emacs
- =mips.el= contains a (still in-progress) MIPS simulator

#+begin_src elisp
(add-load-path! "local-pkgs")
(use-package! nlang-mode)
(use-package! cppman)
(use-package! mips)
(use-package! objdump)
#+end_src

** Modeline customization

This adds an icon for the major-mode in the modeline.

#+begin_src elisp
(after! doom-modeline
  (setq doom-modeline-major-mode-icon t
        doom-modeline-checker-simple-format nil))
#+end_src

** MacOS helper functions

On MacOS, the command and option keys do useful things when combined with both
arrows and the backspace key. We define those here to do the same thing.

#+begin_src elisp
(defun delete-word ()
  (print "In delete-word")
  (let ((bound (bounds-of-thing-at-point 'word)))
    (if bound
        (delete-region (car bound) (cdr bound))
      (error "No word at point"))))

(add-to-list 'initial-frame-alist '(fullscreen . maximized))

(global-set-key (kbd "s-<backspace>") #'evil-delete-whole-line)

(global-set-key (kbd "s-<right>")  #'move-end-of-line)

(global-set-key (kbd "s-<left>") #'move-beginning-of-line)

(global-set-key (kbd "M-<backspace>") #'delete-word)

(global-set-key (kbd "M-<right>") #'forward-word)

(global-set-key (kbd "M-<left>") #'backward-word)

(define-key global-map (kbd "<S-down-mouse-1>") 'mouse-save-then-kill)
#+end_src

Additionally, we set command-x to cut instead of =M-x=.

#+begin_src elisp
(defun cut-region (beg end)
  "Copies the text to the kill buffer and deletes the selected region."
  (interactive "r")
  (copy-region-as-kill beg end)
  (delete-region beg end))

(map! "s-x" #'cut-region)
#+end_src

** Calendar integration

Setting up =org-gcal= is a pain now.

#+begin_src elisp
(after! org-gcal
  (setq org-gcal-fetch-file-alist
        '(("1lspk4920guat9kig78mou932s@group.calendar.google.com"
           "~/org/patrick-reed.org"))))
#+end_src

#+begin_src elisp
(load! "calfw-secrets.el")
(defun open-calendar ()
  (interactive)
  (cfw:open-calendar-buffer
   :contents-sources private-cfw-sources))
#+end_src

** Mode hooks

*** Dafny

Dafny and =prettify-symbols-mode= don't get along, so that gets turned off.

#+begin_src elisp
(add-hook! 'dafny-mode-hook (prettify-symbols-mode -1))
#+end_src

*** =auto-fill-mode=

=auto-fill-mode= is a mode that wraps paragraphs at 80 characters by default.

#+begin_src elisp
(add-hook! ('LaTeX-mode-hook 'markdown-mode-hook 'org-mode-hook) #'auto-fill-mode)
#+end_src

*** $\LaTeX$

I prefer the use of =$= for inline math in $\LaTeX$; this makes auto-insertion
use that instead of =\(\)=.

#+begin_src elisp
(add-hook! cdlatex-mode (setq cdlatex-use-dollar-to-ensure-math t))
#+end_src

$\LaTeX$ also gets todos highlighted and symbols prettified.

#+begin_src elisp
(add-hook! 'LaTeX-mode-hook #'hl-todo-mode)
(add-hook! 'LaTeX-mode-hook #'prettify-symbols-mode)
(add-hook! 'LaTeX-mode-hook (apheleia-mode -1))
#+end_src

$\LaTeX$ macro-folding should only run when =TeX-fold-mode= is active.

#+begin_src elisp
(define-advice +latex-fold-last-macro-a
    (:around (oldfun &rest rest) fix-mode-active)
  (when (bound-and-true-p TeX-fold-mode)
    (apply oldfun rest)))
#+end_src

For some reason, $\mathbb{C}$ is not folded by =prettify-symbols-mode= (even
though $\mathbb{R}$ is).

#+begin_src elisp
(after! tex-mode
  (add-to-list 'tex--prettify-symbols-alist
               '("\\mathbb{C}" . ?â„‚)))
#+end_src

This adds additional shortcuts to =cdlatex=.

#+begin_src elisp
(after! cdlatex
  (setq! cdlatex-math-symbol-alist
         '((?R . ("\\mathbb{R}" "\\Re"))
           (?C . ("\\mathbb{C}" "" "\\arccos"))
           (?Z . ("\\mathbb{Z}" "" ""))))
  (cdlatex-compute-tables))
#+end_src

I spend a lot of time trying to figure out if there is a =cdlatex= shortcut for
a given symbol. =cdlatex-which-shortcut= allows one to search for the shortcut.

#+begin_src elisp
(defvar cdlatex-which-shortcut--most-recent nil)

(defun cdlatex-which-shortcut (symbol)
  (interactive
   ;; TODO: completing-read?
   (list (read-string
          (if cdlatex-which-shortcut--most-recent
              (format "Symbol (default %s): "
                      cdlatex-which-shortcut--most-recent)
            "Symbol: "))))
  (let* ((symb (if (string-empty-p symbol)
                   cdlatex-which-shortcut--most-recent
                 symbol))
         (proper-symbol (if (= (aref symb 0) ?\\)
                            symb
                          (concat "\\" symb))))
    (setf cdlatex-which-shortcut--most-recent proper-symbol)
    (message (or (cl-some (lambda (val)
                            (let ((index (seq-position (cdr val) proper-symbol)))
                              (if index
                                  (format "%c (level %d)" (car val) (1+ index))
                                nil)))
                          cdlatex-math-symbol-alist-comb)
                 "No sequence found"))))
#+end_src

This is recently broken in =LaTeX-mode=: I think Doom prefers folding, but I
don't; this sets things back to using =prettify-symbols= as I think it should.

#+begin_src elisp
(add-hook! 'LaTeX-mode-hook
           (setq-local prettify-symbols-alist tex--prettify-symbols-alist)
           (setq-local prettify-symbols-compose-predicate
                         #'tex--prettify-symbols-compose-p))
#+end_src

This sets Emacs to use =pdf-tools= by default for viewing PDFs.

#+begin_src elisp
(setq +latex-viewers '(pdf-tools))
#+end_src

*** Rust

Rust uses spaces for indenting, and gets rainbow brackets as well.

#+begin_src elisp
(add-hook 'rustic-mode-hook
          (lambda ()
            (setq indent-tabs-mode nil)
            (rainbow-delimiters-mode)))
#+end_src

Rust uses Clippy as a flycheck checker.

#+begin_src elisp
(after! flycheck (cl-pushnew 'rustic-clippy flycheck-checkers))
#+end_src

NOTE: There is a bug in =flycheck-rust-cargo-command-p= stemming from a change
in the format of =cargo list=; see
https://github.com/flycheck/flycheck/issues/1916 (fix supplied by me). When this
fix is merged into Doom, the below code can be removed.

#+begin_src elisp
(after! flycheck
  (define-advice flycheck-rust-cargo-has-command-p
      (:override (command) fix-untrimmed-cargo-list)
    (let ((cargo (funcall flycheck-executable-find "cargo")))
      (cl-some (lambda (x) (string-prefix-p command x))
               (mapcar #'string-trim-left
                       (ignore-errors (process-lines cargo "--list")))))))
#+end_src

We also define a bunch of rust LSP flags to work better. Now that we use
=eglot=, this is redundant, so it is no longer included in the actual
=config.el= file.

#+begin_src elisp :tangle no
(after! lsp-mode
  (setq lsp-rust-analyzer-cargo-watch-command "clippy")
  (setq lsp-rust-clippy-preference "on")
  (setq lsp-rust-analyzer-import-granularity "module")
  (setq lsp-rust-analyzer-proc-macro-enable t)
  (setq lsp-rust-analyzer-experimental-proc-attr-macros t)
  (require 'dap-gdb-lldb))
#+end_src

**** Debugging

This creates a =gdb= debugging template for Rust.

#+begin_src elisp
(after! dap-mode
  (setq dap-default-terminal-kind "integrated")
  (dap-register-debug-template "Rust::GDB Run Configuration"
                               (list :type "gdb"
                                     :request "launch"
                                     :name "GDB::Run"
                                     :gdbpath "rust-gdb"
                                     :target nil
                                     :cwd nil))
  (dap-auto-configure-mode +1))
#+end_src

*** Treemacs

Treemacs has a tendency to disappear before a reload. In order to rectify this,
we define a pre-load visibility and then add hooks on either side of the reload
that set the variable and set Treemacs to match, respectively.

#+begin_src elisp
(defvar pre-reload-treemacs-visibility nil)

(add-hook! 'doom-before-reload-hook
  (setq pre-reload-treemacs-visibility (and (fboundp 'treemacs-current-visibility)
                                            (treemacs-current-visibility))))

(add-hook! 'doom-after-reload-hook
  (when (and (eq pre-reload-treemacs-visibility 'visible)
             (not (eq (treemacs-current-visibility) 'visible)))
    (+treemacs/toggle)))
#+end_src

*** Haskell

Literate Haskell gets visual line wraps.

#+begin_src elisp
(add-hook! 'haskell-literate-mode-hook
  (visual-line-mode t))
#+end_src

Hoogle (Haskell's search engine) uses needs an explicit command set.

#+begin_src elisp
(after! haskell-mode
  (setq! haskell-hoogle-command "hoogle"))
#+end_src

*** Common Lisp

I have an offline copy of the [[http://www.lispworks.com/reference/HyperSpec/][CLHS]]; this allows me to use the offline copy in
lookups instead of going to the online version.

#+begin_src elisp
(after! sly
  (setq common-lisp-hyperspec-root "file:///usr/local/share/doc/HyperSpec/"))
#+end_src

*** Python

Python likes to be very strict about its 80-character line limit, so we add a
line at 80 characters for that.

#+begin_src elisp
(add-hook! 'python-mode-hook
  (display-fill-column-indicator-mode 80))
#+end_src

*** Git-gutter

Set =git-gutter= to update every 2 seconds.

#+begin_src elisp
(after! git-gutter (setq git-gutter:update-interval 2))
#+end_src

In Emacs versions less than 28, =git-gutter= sometimes doesn't show up; this is
a patch for that.

#+begin_src elisp
(when (< emacs-major-version 28)
  (after! git-gutter-fringe (set-fringe-mode nil)))
#+end_src

*** Elfeed

I want =elfeed= to auto-update every time I open it (otherwise I'll forget to
refresh it).

#+begin_src elisp
(add-hook! 'elfeed-search-mode-hook #'elfeed-update)
#+end_src

*** Vertico

I don't like history in my sorting, so this changes Vertico to ignore that in
sorting.

#+begin_src elisp
(after! vertico
  (setq! vertico-sort-function #'vertico-sort-length-alpha))
#+end_src

*** Gnus

I mostly use gnus for Emacs mailing-list discussion, so =gmane= is the best
source for that.

#+begin_src elisp
(after! gnus
  (setf gnus-select-method '(nntp "news.gmane.io")))
#+end_src

*** CSV

The =csv-mode= package includes a =csv-align-mode=, which aligns all columns in
a CSV or TSV file.

#+begin_src elisp
(add-hook! 'csv-mode-hook #'csv-align-mode)
#+end_src

*** Lua

Files with the =.tlu= extension appear to be TeX Lua, which uses =lua-mode=.

#+begin_src elisp
(add-to-list 'auto-mode-alist '("\\.tlu\\'" . lua-mode))
#+end_src

*** OCaml

For [[https://lists.gnu.org/archive/html/emacs-devel/2018-06/msg00756.html][weird historical reasons]], =.ml= files are associated with Lisp instead of
OCaml or ML. This changes that to use OCaml instead.

#+begin_src elisp
(add-to-list 'auto-mode-alist '("\\.ml\\'" . tuareg-mode))
#+end_src
